<HTML>

<HEADER>
<style>
    body{ background-color: ivory; }
    canvas{
      border: 1px solid black;
      position: absolute;
    }
    #canvasWrapper{
      position:relative;
    }
</style>

<script type="text/javascript" src="../../javascript/jquery-1.9.1.js"></script>
<script type="text/javascript" src="../../javascript/fabric.min.js"></script>
<!---<script type="text/javascript" src="https://raw.githubusercontent.com/fabricjs/fabric.js/master/dist/fabric.min.js"></script>--->
<script id="insert"></script>
<script src="../../javascript/stringify.js" charset="utf-8"></script>
<script>
  const customConsole = (w) => {
    const pushToConsole = (payload, type) => {
      w.parent.postMessage({
        console: {
          payload: stringify(payload),
          type:    type
        }
      }, "*")
    }

    w.onerror = (message, url, line, column) => {
      // the line needs to correspond with the editor panel
      // unfortunately this number needs to be altered every time this view is changed
      line = line - 70
      if (line < 0){
        pushToConsole(message, "error")
      } else {
        pushToConsole(`[${line}:${column}] ${message}`, "error")
      }
    }

    let console = (function(systemConsole){
      return {
        log: function(){
          let args = Array.from(arguments)
          pushToConsole(args, "log")
          systemConsole.log.apply(this, args)
        },
        info: function(){
          let args = Array.from(arguments)
          pushToConsole(args, "info")
          systemConsole.info.apply(this, args)
        },
        warn: function(){
          let args = Array.from(arguments)
          pushToConsole(args, "warn")
          systemConsole.warn.apply(this, args)
        },
        error: function(){
          let args = Array.from(arguments)
          pushToConsole(args, "error")
          systemConsole.error.apply(this, args)
        },
        system: function(arg){
          pushToConsole(arg, "system")
        },
        clear: function(){
          systemConsole.clear.apply(this, {})
        },
        time: function(){
          let args = Array.from(arguments)
          systemConsole.time.apply(this, args)
        },
        assert: function(assertion, label){
          if (!assertion){
            pushToConsole(label, "log")
          }

          let args = Array.from(arguments)
          systemConsole.assert.apply(this, args)
        }
      }
    }(window.console))

    window.console = { ...window.console, ...console }

    console.system("Running fiddle")
  }

  if (window.parent){
    customConsole(window)
  }
</script>
</HEADER>


<BODY>

   <h4>Drag the mouse to create a rectangle</h4>
   <div id = "canvasWrapper">
       <canvas id="canvas" width="700" height="500"></canvas>
   </div>
   <input id="downloadbutton" type="button" value="Save PNG Image" />
   <input id="deleteallbutton" type="button" value="Delete All Object(s)" />
   <input id="deletelastbutton" type="button" value="Delete Last Object" />
   <input id="getCorners" type="button" value="Print Corners" />
   <br /><br /><br />

<script type="text/javascript" src="drawShadedBoxes.js"></script>
</BODY>
</HTML>